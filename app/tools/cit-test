#!/bin/bash

#set -x 

# turn on utf-8 for test execution

UDP_PORT=9000
TCP_PORT=9101

EURO_UTF8='€' # same as \xe2\x82\xac
EURO_IBM852='\x80'
EURO=${EURO_IBM852}

ADDRESS=""
if test -f .cit.ip; then 
	ADDRESS="`cat .cit.ip`"
fi

all=""
# ===========================================================================

#/cit/codepage = "ibm852"

all="$all set_codepage_ibm852"
test_set_codepage_ibm852()
{
    cat 1>&2 << !EOF!
Change settings: Set codepage to ibm852
!EOF!

cat > cit.conf << !EOF!
/cit/codepage = "ibm852"
!EOF!
curl -s -S ftp://${ADDRESS}/ -T cit.conf 
sleep 3
}

all="$all set_codepage_ibm1253"
test_set_codepage_ibm1253()
{
    cat 1>&2 << !EOF!
Change settings: Set codepage to ibm1253 (greek)
!EOF!

cat > cit.conf << !EOF!
/cit/codepage = "ibm1253"
!EOF!
curl -s -S ftp://${ADDRESS}/ -T cit.conf 
sleep 3
}

all="$all set_codepage_utf8"
test_set_codepage_utf8()
{
    cat 1>&2 << !EOF!
Change settings: Set codepage to utf-8
!EOF!

cat > cit.conf << !EOF!
/cit/codepage = "utf-8"
!EOF!
curl -s -S ftp://${ADDRESS}/ -T cit.conf 
sleep 3
}



# typical usage
all="$all text_1"
test_text_1()
{
    cat 1>&2 << !EOF!
Testing normal operation with clean text and
line-breaks \r and \n, returning to pos 0 on next line
The display should show:
------------------------
Mineral water
1 Ltr
!!! Profiteer !!!


                  € 0.98
------------------------
!EOF!
	echo -en "\e\x24"						# Clear screen
	echo -en "\e\x42\x30"           		# font size small
	echo -en "Mineral water\x03"			# Text
	echo -en "\n1 Ltr\x03"					# nextline + Text
	echo -en "\r!!!  Profiteer  !!!!\x03"   # nextline + Text
	echo -en "\e\x42\x31"					# Font size big
	echo -en "\e\x2e\x38${EURO} 0.98\x03"	# Align text right bottom
}


# alignment
all="$all text_2"
test_text_2()
{
    cat 1>&2 << !EOF!
Testing alignment
------------------------
lt      xt ct         rt

ly Y    X  cy         ry
lm      xm cm         rm

                 
lb      xb cb         rb
------------------------
!EOF!
	echo -en "\e\x42\x30"				# Set font
	echo -en "\e\x25"					# Clear display
	echo -en "\e\x2e\x30lt\x03" 		# Left top
	echo -en "\e\x2e\x31ct\x03" 		# Centre top
	echo -en "\e\x2e\x32rt\x03" 		# Right top
	echo -en "\e\x2e\x33lm\x03" 		# left middle
	echo -en "\e\x2e\x34cm\x03" 		# Centre middle
	echo -en "\e\x2e\x35rm\x03" 		# Right middle
	echo -en "\e\x2e\x36lb\x03" 		# Left bottom
	echo -en "\e\x2e\x37cb\x03" 		# Centre bottom
	echo -en "\e\x2e\x38rb\x03" 		# Right bottom
	
	echo -en "\e\x2c\x50\x40X\x03"		# Write x at (
	echo -en "\e\x2c\x50\x40"			# Set pixel position (
	echo -en "\e\x2e\x3cxt\x03" 		# Left keep x
	echo -en "\e\x2c\x50\x40"			# Set pixel position (
	echo -en "\e\x2e\x3dxm\x03" 		# Centre keep x
	echo -en "\e\x2c\x50\x40"			# Set pixel position (
	echo -en "\e\x2e\x3exb\x03" 		# right keep x

	echo -en "\e\x2c\x40\x40Y\x03"		# Write Y at (20,20)
	echo -en "\e\x2c\x40\x40"			# Set pixel position (20,20)
	echo -en "\e\x2e\x39ly\x03" 		# Left keep y
	echo -en "\e\x2e\x3Acy\x03" 		# Centre keep y
	echo -en "\e\x2e\x3Bry\x03" 		# right keep y
}


all="$all text_3"
test_text_3()
{
    cat 1>&2 << !EOF!
Testing utf8 euro sign
Required: utf8
------------------------
€
------------------------
!EOF!
	echo -en "\e\x42\x30"					# Set font
	echo -en "\e\x25"						# Clear display
	echo -en "\e\x2e\x30\xe2\x82\xac\x03"	# Left top € sign = \xe2\x82\xac
}

all="$all text_5"
test_text_5()
{
    cat 1>&2 << !EOF!
Testing chinese charracters
The extra fontset should be available in /mnt (micro sd card)
!EOF!

	echo -en "\e\x42\x31"				# Set font
	echo -en "\e\x25"					# Clear display

	echo -en "\e\x2e\x30"
	echo -en "礦泉水"						# Mineral water
	echo -en "\x03"
	
	echo -en "\e\x2e\x33"
	echo -en "Mineral water"			# Mineral water
	echo -en "\x03"
	
	echo -en "\e\x42\x30"				# Set font
	
	echo -en "\e\x2e\x32"
	echo -en "公升"						# Liter
	echo -en "\x03"
	
	echo -en "\e\x2e\x36"
	echo -en "1 Liter"
	echo -en "\x03"
}

all="$all text_6"
test_text_6()
{

	echo -en "\e\x42\x31"				# Set font
	echo -en "\e\x25"					# Clear display
	echo -en "\e\x2e\x30"
  	echo -en "применению"
	echo -en "\x03"
}

all="$all text_7"
test_text_7()
{
    cat 1>&2 << !EOF!
Check operation with sloppy formatting 
(not closing a string with \x03)
The display should look like:
------------------------

   One of 2
   Two of 2

------------------------
!EOF!
	# test sloppy formatting without end of string (=\x03) chars
	echo -en "\e\x42\x30"				# Font size 0
	echo -en "\e\x24"					# Clear screen
	echo -en "\e\x27\x35\x32"			# set cursor (not pixel!) position
	echo -en "One of 2"
	echo -en "\e\x27\x35\x33"			# set cursor position
	echo -en "Two of 2\x03"				# Text
}


all="$all text_8"
test_text_8()
{
    cat 1>&2 << !EOF!
Testing greek letters in utf8:
------------------------
βιβλος γενεσεως ιησου
------------------------
!EOF!
	echo -en "\e\x42\x30"						# Font size 0
	echo -en "\e\x24"							# Clear the screen
	echo -en "\e\x2e\x31βιβλος γενεσεως ιησου\x03" 	# Text center - top
}

all="$all text_9"
test_text_9()
{
    cat 1>&2 << !EOF!
Testing special german charracters (utf8)
------------------------
őŐűŰúÚ
------------------------
!EOF!
	echo -en "\e\x42\x30"						# Font size 0
	echo -en "\e\x24"							# Clear the screen
	echo -en "\e\x2e\x31őŐűŰúÚ\x03" 	# Text center - top
}

all="$all text_10"
test_text_10()
{
    cat 1>&2 << !EOF!
Testing special greek charracters (ibm1253)
------------------------

------------------------
!EOF!
	echo -en "\e\x42\x30"						# Font size 0
	echo -en "\e\x24"							# Clear the screen
	echo -en "\e\x2e\x31\xb6\xa8\xa5\x03" 	# Text center - top
	
	
}

all="$all text_11"
test_text_11 ()
{
    cat 1>&2 << !EOF!
Required: Utf 8 
Expect:
--------------------
Cheese
500 gr

              € 5.69
--------------------
!EOF!

	echo -en "\e\x42\x30"
	echo -en "\e\x25"
	echo -en "Cheese\n"
	echo -en "500 gr"
	echo -en "\e\x42\x31"
	echo -en "\e\x2e\x38"
	echo -en "${EURO} 5.69\x03"
}

all="$all text_12"
test_text_12 ()
{
    cat 1>&2 << !EOF!
Test right bottom alignement for chinese charracters
Required: utf8
Expect:
---------------------



             欢迎光临
---------------------
!EOF!
	echo -en "\e\x25"
	echo -en "\e\x2e\x38" # right bottom
	echo -en "欢迎光临\x03"
}

all="$all text_13"
test_text_13 ()
{
    cat 1>&2 << !EOF!
Test small and big chinese font
Required: utf8
Expect
---------------------
汽水
500ml

               2.5元
---------------------
!EOF!
	echo -en "\e\x42\x30" # font size small
	echo -en "\e\x25"     # clear screen
	echo -en "汽水\n500ml"
	echo -en "\e\x42\x31" # font size big
	echo -en "\e\x2e\x38" # align rb
	echo -en "2.5元\x03"
}

all="$all text_14"
test_text_14 ()
{
    cat 1>&2 << !EOF!
Test use of NL ('\n') in line with centered alignment and long text
Should work independent of font set
Expect on display:
------------------------------
        Line 1 part 1
  blabla line1 part 2 blabla
  
    line2 part 1
line2 part 2 blabla
  
------------------------------
!EOF!

	echo -en "\e\x25"     # clear screen
	echo -en "\e\x42\x30" # font size small
	echo -en "\e\x2e\x31Line1 part 1\nblabla line1 part 2 blabla\x03" # Center top
	echo -en "\e\x2752"    # charracter position at 5,3
	echo -en "Line2 part 1\nline2 part 2 blabla\x03"
	echo -en "\e\x2e\x38Line3 part 1\nline3 part 2 blabla\x03" # right bottom
}

all="$all text_15"
test_text_15 ()
{
    cat 1>&2 << !EOF!
Testing SG15 compatebility for line breaks
Test use of CR ('\x0d') in line with centered alignment and long text
Should work independent of font set
Expect on display:
------------------------------
        Line 1 part 1
  blabla line1 part 2 blabla
  
    line2 part 1
line2 part 2 blabla
  
------------------------------
!EOF!

	echo -en "\e\x25"     # clear screen
	echo -en "\e\x42\x30" # font size small
	echo -en "\e\x2e\x31Line1 part 1\x0dblabla line1 part 2 blabla\x03"	# Center top
	echo -en "\e\x2752"    # charracter position at 5,3
	echo -en "Line2 part 1\x0dline2 part 2 blabla\x03"
	echo -en "\e\x2e\x38Line3 part 1\x0dline3 part 2 blabla\x03" # right bottom
}


all="$all text_16"
test_text_16 ()
{
    cat 1>&2 << !EOF!
Test use of line break in text
Just positioning on 10,21 px
Should work independent of font-set
Testing SG15 and unix line-breaks in the same testcase
Expect on display:
------------------------------
  Line 1 part 1
line 1 part 2

       Line 2 part 1
line 2 part 2
  
------------------------------
!EOF!

	echo -en "\e\x25"     # clear screen
	echo -en "\e\x42\x30" # font size small
	echo -en "\e\x2c\x34\x34"					# Set pixel position (4,4)
	echo -en "Line1 part 1\nline1 part 2\x03"
	echo -en "\e\x2c\x50\x50"					# Set pixel position (20,20)
	echo -en "Line2 part 1\x0dline2 part 2\x03"
}

all="$all text_17"
test_text_17 ()
{
    cat 1>&2 << !EOF!
Test use of line break in text
Just positioning 4,2 (char pos)
------------------------------


    Line 1 part 1
line 1 part 2
  
------------------------------
!EOF!

	echo -en "\e\x25"     # clear screen
	echo -en "\e\x42\x30" # font size small
	echo -en "\e\x27\x34\x32"					# Set cursor position 4,2
	echo -en "Line1 part 1\nline1 part 2\x03"
}

all="$all text_18"
test_text_18 ()
{
    cat 1>&2 << !EOF!
Test use of NL (unix style) in text with alignments
Should work independent of font set
Expect on display:
------------------------
lt         ct         rt
lt2       ct02       rt2

lm         cm         rm
lm2       cm02       rm2
                 
lb         cb         rb
lb2       cb02       rb2
------------------------
!EOF!
	echo -en "\e\x42\x30"				# Set font
	echo -en "\e\x25"					# Clear display
	echo -en "\e\x2e\x30lt1\nlt2\x03" 		# Left top
	echo -en "\e\x2e\x31ct\nct02\x03" 		# Centre top
	echo -en "\e\x2e\x32rt\nrt2\x03" 		# Right top
	echo -en "\e\x2e\x33lm\nlm2\x03" 		# left middle
	echo -en "\e\x2e\x34cm\ncm02\x03" 		# Centre middle
	echo -en "\e\x2e\x35rm\nrm2\x03" 		# Right middle
	echo -en "\e\x2e\x36lb\nlb2\x03" 		# Left bottom
	echo -en "\e\x2e\x37cb\ncb02\x03" 		# Centre bottom
	echo -en "\e\x2e\x38rb\nrb2\x03" 		# Right bottom
}

all="$all text_19"
test_text_19 ()
{
    cat 1>&2 << !EOF!
Test use of CR (SG15) in text with alignments
Should work independent of font set
Expect on display:
------------------------
lt         ct         rt
lt2       ct02       rt2

lm         cm         rm
lm2       cm02       rm2
                 
lb         cb         rb
lb2       cb02       rb2
------------------------
!EOF!
	echo -en "\e\x42\x30"				# Set font
	echo -en "\e\x25"					# Clear display
	echo -en "\e\x2e\x30lt1\x0dlt2\x03" 		# Left top
	echo -en "\e\x2e\x31ct\x0dct02\x03" 		# Centre top
	echo -en "\e\x2e\x32rt\x0drt2\x03" 		# Right top
	echo -en "\e\x2e\x33lm\x0dlm2\x03" 		# left middle
	echo -en "\e\x2e\x34cm\x0dcm02\x03" 		# Centre middle
	echo -en "\e\x2e\x35rm\x0drm2\x03" 		# Right middle
	echo -en "\e\x2e\x36lb\x0dlb2\x03" 		# Left bottom
	echo -en "\e\x2e\x37cb\x0dcb02\x03" 		# Centre bottom
	echo -en "\e\x2e\x38rb\x0drb2\x03" 		# Right bottom
}

all="$all text_20"
test_text_20 ()
{
    cat 1>&2 << !EOF!
Test use of line break in text with alignments
Expect on display:
------------------------
tbd
------------------------
!EOF!
	echo -en "\e\x42\x30"				# Set font
	echo -en "\e\x25"					# Clear display
	echo -en "\e\x2c\xd0\x82X\x03"		# Write x at (
	echo -en "\e\x2c\xd0\x84"			# Set pixel position (
	echo -en "\e\x2e\x3cxt\nxt2\x03" 	# Left keep x
	echo -en "\e\x2c\xd0\x84"			# Set pixel position (
	echo -en "\e\x2e\x3dxm\nxm2\x03" 	# Centre keep x
	echo -en "\e\x2c\xd0\x84"			# Set pixel position (
	echo -en "\e\x2e\x3exb\nxb2\x03" 	# right keep x

	echo -en "\e\x2c\x44\x44Y\x03"		# Write Y at (20,20)
	echo -en "\e\x2c\x44\x44"			# Set pixel position (20,20)
	echo -en "\e\x2e\x39ly\nly2\x03" 	# Left keep y
	echo -en "\e\x2e\x3Acy\ncy2\x03" 	# Centre keep y
	echo -en "\e\x2e\x3Bry\nry2\x03" 	# right keep y
}

all="$all text_21"
test_text_21 ()
{
    cat 1>&2 << !EOF!
Test use of NL (SG15 style) in text with alignments
Expect on display:
------------------------
tbd
------------------------
!EOF!
	echo -en "\e\x42\x30"				# Set font
	echo -en "\e\x25"					# Clear display
	echo -en "\e\x2c\xd0\x82X\x03"		# Write x at (
	echo -en "\e\x2c\xd0\x84"			# Set pixel position (
	echo -en "\e\x2e\x3cxt\x0dxt2\x03" 	# Left keep x
	echo -en "\e\x2c\xd0\x84"			# Set pixel position (
	echo -en "\e\x2e\x3dxm\x0dxm2\x03" 	# Centre keep x
	echo -en "\e\x2c\xd0\x84"			# Set pixel position (
	echo -en "\e\x2e\x3exb\x0dxb2\x03" 	# right keep x

	echo -en "\e\x2c\x44\x44Y\x03"		# Write Y at (20,20)
	echo -en "\e\x2c\x44\x44"			# Set pixel position (20,20)
	echo -en "\e\x2e\x39ly\x0dly2\x03" 	# Left keep y
	echo -en "\e\x2e\x3Acy\x0dcy2\x03" 	# Centre keep y
	echo -en "\e\x2e\x3Bry\x0dry2\x03" 	# right keep y
}



all="$all text_22"
test_text_22 ()
{
    cat 1>&2 << !EOF!
Test custom font size (very small and VERY BIG)
!EOF!
	echo -en "\e\x25" 				# clear screen
	echo -en "\e\x42\x32custom 32H\n\x03" # 6pt
	echo -en "\e\x42\x4040H\x03" # 96pt
	echo -en "\e\x42\x31" # big
}


all="$all text_23"
test_text_23 ()
{
    cat 1>&2 << !EOF!
Test overwrite with big font
NOTE: This does not work when using -base64
!EOF!
	echo -en "\e\x25" 				# clear screen
	echo -en "\e\x42\x36" # 96pt
	echo -en "\e\x2e\x34wo 10 juli\n10:10\x03"
	sleep 1
	echo -en "\e\x25" 				# clear screen
	echo -en "\e\x42\x36" # 96pt
	echo -en "\e\x2e\x34wo 10 juli\n10:11\x03"
}


# ===========================================================================
all="$all enable"
test_disable()
{
    cat 1>&2 << !EOF!
Disabling scanner. Verify whether the scanner is disabled
!EOF!
	echo -en "\e\x5b\x30"				# Scanner disable
}

all="$all disable"
test_enable()
{
    cat 1>&2 << !EOF!
Enable scanner. Verify whether the scanner is enabled
!EOF!
	echo -en "\e\x5b\x31"				# Scanner enable
}

# ===========================================================================

all="$all config"
test_config()
{
    cat 1>&2 << !EOF!
Show config.
Verify: 
	serial number
	application version
	ip-address
	used interface
	mac address
!EOF!
	echo -en "\e\xfe"					# Show config
}

all="$all version"
function test_version()
{
    cat 1>&2 << !EOF!
return the firmware version
Expect something like: "1.5"
!EOF!
	echo -en "\e\x5f"
}


all="$all version_sg15"
test_version_sg15 ()
{
    cat 1>&2 << !EOF!
return the firmware version, SG15 format.
Expect: "SG15V01.03" ==
!EOF!

	echo -en "\e\x60"                   # SG15 firmware version
}


# ===========================================================================

all="$all beep"
test_beep()
{
    cat 1>&2 << !EOF!
Play a beep
!EOF!

	echo -en "\e\x5e"					# Beep
}

# ===========================================================================

all="$all gpio_OUT1_low"
test_gpio_OUT1_low ()
{
	# Eddy GPIO 1/Output		GPIO1-->PC16 (offset:1)
	# Eddy GPIO 3/Output		GPIO3-->PC18 (offset:3)
	# Eddy GPIO 5/Input			GPIO5-->PC20 (offset:5)
	# Eddy GPIO 7/Input			GPIO7-->PC22 (offset:7)
	# NQ201 whitelight(only for nQuire 201)		GPIO11 --> PC26(offset:11)
	#											High level disable ;	Low level enable	
	# Peripheral power(usb,wifi,2027,GPRS,lcd-backlight)	PID1  --> PC7 (offset:18)
	#											High level enable ;	Low level disable

    cat 1>&2 << !EOF!
Set gpio OUT1 low
!EOF!
	
	echo -en "\e\x7e00"
}


all="$all gpio_OUT1_high"
test_gpio_OUT1_high ()
{
    cat 1>&2 << !EOF!
Set gpio OUT1 high
!EOF!
	echo -en "\e\x7e01"
}

all="$all gpio_OUT2_low"
test_gpio_OUT2_low ()
{
    cat 1>&2 << !EOF!
Set gpio OUT2 low
!EOF!
	echo -en "\e\x7e10"
}

all="$all gpio_OUT2_high"
test_gpio_OUT2_high ()
{
    cat 1>&2 << !EOF!
Set gpio OUT2 high
!EOF!
	echo -en "\e\x7e11"
}

all="$all gpio_IN1"
test_gpio_IN1 ()
{
    cat 1>&2 << !EOF!
Get gpio IN1
!EOF!
	echo -en "\e\x7f0"
}

all="$all gpio_IN2"
test_gpio_IN2 ()
{
    cat 1>&2 << !EOF!
Get gpio IN2
!EOF!
	echo -en "\e\x7f1"
}

# ===========================================================================
all="$all sleep"
test_sleep ()
{
    cat 1>&2 << !EOF!
Set scanner in sleep mode (should only works with scanners
from production batch 1 and than only when using the ethernet interface)
!EOF!

	echo -en "\e\x5d\x30"               # scanner sleep
}

all="$all wakeup"
test_wakeup ()
{
    cat 1>&2 << !EOF!
Wake up scanner from sleep mode
!EOF!
	echo -en "\e\x5d\x31"               # scanner wake up
}


# ===========================================================================

all="$all fake_barcode"
test_fake_barcode()
{
    cat 1>&2 << !EOF!
Testing fake barcode scan
The display should show the error message (please ask for assistance)
And the received barcode should be "A1234" == 
(this only works when the application is started in debug mode (commandline -D)
!EOF!
	echo -en "\e\xff\x30A1234\x03"				# Fake barcode scan
}


all="$all watson_bug"
test_watson_bug ()
{
    cat 1>&2 << !EOF!
Watson bug: \0 charracters instead of '\x03'
!EOF!
	echo -en "\e\x25" 				# clear screen
	echo -en "\e\x2e\x3812345"      # 
	echo -en "\0\0\0\0\0\0\0\0"     # 
	
}

# ===========================================================================

all="$all touch_keypad"
test_touch_keypad ()
{


    cat 1>&2 << !EOF!
Touch keyboard image test. Use touch_click to test touch click events.
!EOF!

	echo -en "\e\x25" 				# clear screen
	echo -en "\e\xf2kitty.gif\r\r33\x03"

	echo -en "\e\xf21.gif\r\r44\x03"
	echo -en "\e\xf22.gif\r\r55\x03"
	echo -en "\e\xf23.gif\r\r66\x03"
	echo -en "\e\xf2ok.gif\r\r77\x03"
	
	echo -en "\e\xf24.gif\r\r88\x03"
	echo -en "\e\xf25.gif\r\r99\x03"
	echo -en "\e\xf26.gif\r\raa\x03"
	echo -en "\e\xf2cancel.gif\r\rbb\x03"
	
	echo -en "\e\xf27.gif\r\rcc\x03"
	echo -en "\e\xf28.gif\r\rdd\x03"
	echo -en "\e\xf29.gif\r\ree\x03"
	echo -en "\e\xf20.gif\r\rff\x03"
	
	echo -en "\e\x2e\x30This is text\x03"

}

all="$all touch_click"
touch_click_sleep=8
test_touch_click()
{
    cat 1>&2 << !EOF!
Receive touch keyboard events for 8 seconds..
Use touch_click to display clickable images.
You should see the events like 
K41.gif
K7OK.gif
!EOF!
}

all="$all touch_timeout"
touch_timeout_sleep=12
test_touch_timeout()
{
    cat 1>&2 << !EOF!
Waiting for a touch timeout (waiting 12 seconds)....
Preparation: set the touch timeout to 10 seconds using the webui
You should see a KT event when the display is cleared.
Then after error-message-timeout seconds the idle message should be displayed
!EOF!
}

all="$all touch_quit"
test_touch_quit()
{
    cat 1>&2 << !EOF!
Force a touch16 quit event (KQ) by clearing the display
!EOF!
	echo -en "\e\x25" 				# clear screen
}

all="$all idle"
test_idle ()
{
    cat 1>&2 << !EOF!
Image test: back to idle mode, use after test_33 to break keyboard input
!EOF!
	echo -en "\e\xf3"
}

all="$all image_anim"
image_anim_sleep=3
test_image_anim ()
{
	curl -v ftp://${ADDRESS}/img/ -T img/kitty.gif
    cat 1>&2 << !EOF!
Image test. 1 image in each corner and 'winking kitty' in the middle
!EOF!

	echo -en "\e\x25" 				# clear screen
	echo -en "\e\xf01.gif\x03"

	echo -en "\e\x2c\xe4\x30"
	echo -en "\e\xf02.gif\x03"

	echo -en "\e\x2c\xe4\x90"
	echo -en "\e\xf03.gif\x03"

	echo -en "\e\x2c\x30\x90"
	echo -en "\e\xf04.gif\x03"
	
	echo -en "\e\x2c\x90\x60"
	echo -en "\e\xf0kitty.gif\x03"
	
}

all="$all backlight_off"
test_backlight_off ()
{
    cat 1>&2 << !EOF!
Turn backlight off
!EOF!
	echo -en "\e\x5c\x30"
}

all="$all backlight_on"
test_backlight_on ()
{
    cat 1>&2 << !EOF!
Turn backlight on
!EOF!
	echo -en "\e\x5c\x31"
}

all="$all backlight_flicker"
test_backlight_flicker ()
{
    cat 1>&2 << !EOF!
Flicker backlight
!EOF!
	echo -en "\e\x5c\x30\e\x5c\x31"
}

# ===========================================================================

all="$all mifare_read_1"
mifare_read_1_sleep=4
test_mifare_read_1 ()
{
    cat 1>&2 << !EOF!
Read from mifare card.
First make some settings...
!EOF!

cat > cit.conf << !EOF!
/dev/mifare/relevant_sectors = ""
/dev/mifare/prevent_duplicate_scan_timeout = 1
/dev/mifare/cardnum_format = "hexadecimal"
/dev/mifare/sector_data_format = "hex"
/dev/mifare/sector_data_seperator = "comma"
/cit/message_encryption = "none"
!EOF!
set -x
curl ftp://${ADDRESS}/ -T cit.conf 
sleep 3
echo "Now present card..." 1>&2

	echo -en "\e\x25"					# Clear display
	echo -en "\e\x42\x30"				# Set font
	echo -en "\e\x2e\x34Present mifare card\x03" 		# Center middle
	sleep 2
	echo -en "\e\x25"					# Clear display
	echo -en "\e\x2e\x34Reading card 76262fa5\nsector 3, block 0\n\x03"
	echo "Reading now 1:0 in binary and and 15:2 in hex" 1>&2
	echo -en "\e\xf876262fa5,FFFFFFFFFFFF:\x3f2H\x03"

sleep 3
}

all="$all mifare_shift_transaction_log"
mifare_shift_transaction_log_sleep=1
test_mifare_shift_transaction_log ()
{
    cat 1>&2 << !EOF!
Shift mifare transaction log to 1234abcd
!EOF!
	echo -en "\e\xfa1234abcd\x03"	
}

# ===========================================================================

all="$all delay_msg_idle_1"
delay_msg_idle_1_sleep=4
test_delay_msg_idle_1 ()
{
    cat 1>&2 << !EOF!
Show something and delay the timeout shorter than the origial timeout
Returned should be: "Ttakkie"
!EOF!
	echo -en "\e\x25"					# Clear display
	echo -en "\e\x42\x30"				# Set font
	echo -en "\e\x2e\x34Waiting for\nidle timeout\x03" 		# Center middle
	echo -en "\e\xf4I25takkie\x03"
}

all="$all delay_msg_error_1"
delay_msg_error_1_sleep=4
test_delay_msg_error_1 ()
{
    cat 1>&2 << !EOF!
Show something and delay the timeout shorter than the origial timeout
Returned should be: "Ttakkie"
Than after the error-message-timeout, the error message should be shown
!EOF!
	echo -en "\e\x25"					# Clear display
	echo -en "\e\x42\x30"				# Set font
	echo -en "\e\x2e\x34Waiting for\nerror timeout\x03" 		# Center middle
	echo -en "\e\xf4E25takkie\x03"
}

# ===========================================================================

all="$all crash"
test_crash()
{
    cat 1>&2 << !EOF!
Simulate a crash
This should be catched and logged
!EOF!
	echo -en "\e\xfd"
}

# ===========================================================================

if test -z "$1" -o "$1" = "-h" -o "$1" = "--help";
then
cat << EOF
cit-test -h|{[-udp][-tcp][-imb852][-utf8] [-a <ip address>] <test id>}+
Send a certain string to the cit
 -udp        use udp messages using port 9000
 -tcp        use tcp messages using port 9101 (default)
 -ibm852     use ibm852 euro sign charracter (default)
 -utf8       use utf8 euro sign charracter
 -a address  the address or name of the nquire (when ommitted, the
             contents of .cit.ip is used)
 -base64     messages are to be 'encrypted' using base64

Available tests:
$all
EOF
	exit

else
	PORT=$TCP_PORT
	while test -n "$1"; do
		if test "$1" = "-udp"; then
			PORT=$UDP_PORT
			UDP="-u"
		elif test "$1" = "-tcp"; then
			PORT=$TCP_PORT
			UDP=
		elif test "$1" = "-utf8"; then
			EURO=${EURO_UTF8}
		elif test "$1" = "-ibm852"; then
			EURO=${EURO_IBM852}
		elif test "$1" = "-a"; then
			shift
			ADDRESS=$1
			echo "$ADDRESS" > .cit.ip
		elif test "$1" = "-base64"; then
			ENCODE="base64"
			DECODE="base64 -d"
		else 
			echo ------------------------------------------------------------------
			echo "test $1 on ${ADDRESS}:${PORT}"
			#set -x
			wait_for_answer=1
			sleep_var=${1}_sleep
			if test ${!sleep_var}; then
				wait_for_answer=${!sleep_var}
			fi
			if test -z $ENCODE; then
				test_$1 | nc -q $wait_for_answer $UDP ${ADDRESS} ${PORT} 
			else
				answer="`test_$1 | $ENCODE | nc -q $wait_for_answer $UDP ${ADDRESS} ${PORT}`"
				echo -n "$answer" | $DECODE
			fi
			set +x
		fi
		shift
	done
fi

#-- vi: ft=sh ts=4 sw=4
