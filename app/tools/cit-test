#!/bin/bash

#set -x 

# turn on utf-8 for test execution

UDP_PORT=9000
TCP_PORT=9101

EURO_UTF8='€' # same as \xe2\x82\xac
EURO_IBM852='\x80'
EURO=${EURO_IBM852}

if test -f .cit.ip; then 
	ADDRESS="`cat .cit.ip`"
else
	ADDRESS="cit"
fi

test_1()
{
    cat 1>&2 << !EOF!
Testing normal operation with clean text and
line-breaks \r and \n, returning to pos 0 on next line
The display should show:
------------------------
Mineral water
1 Ltr
!!! Profiteer !!!


                  € 0.98
------------------------
!EOF!
	echo -en "\e\x42\x30"					# Font size 0
	echo -en "\e\x24"						# Clear screen
	echo -en "\e\x42\x30"           		# font size small
	echo -en "Mineral water\x03"			# Text
	echo -en "\n1 Ltr\x03"					# nextline + Text
	echo -en "\r!!!  Profiteer  !!!!\x03"   # nextline + Text
	echo -en "\e\x42\x31"					# Font size big
	echo -en "\e\x2e\x38${EURO} 0.98\x03"	# Align text right bottom
}

test_2()
{
    cat 1>&2 << !EOF!
Testing normal operation, centered aligned
The display should show ("Special offer" in font big):
------------------------
   Coca Cola 0.33Ltr
     € 2.69 (Crate)
     
     
     
     Special Offer!
------------------------
!EOF!
	echo -en "\e\x42\x30"						# Font size 0
	echo -en "\e\x24"							# Clear the screen
	echo -en "\e\x2e\x31Coca Cola 0.33Ltr\x03" 	# Text center - top
	echo -en "\e\x2c\x30\x45"					# Set pixel position (0,21)
	echo -en "\e\x2e\x3a${EURO} 2.69 (Crate)\x03"	# Align text to horizontal center
	echo -en "\e\x42\x31"						# Font size 1
	echo -en "\e\x2e\x37Special Offer !\x03"	# Text bottom center
}

test_3()
{
    cat 1>&2 << !EOF!
Testing alignment
------------------------
lt      xt ct         rt

ly Y    X  cy         ry
lm      xm cm         rm

                 
lb      xb cb         rb
------------------------
!EOF!
	echo -en "\e\x42\x30"				# Set font
	echo -en "\e\x25"					# Clear display
	echo -en "\e\x2e\x30lt\x03" 		# Left top
	echo -en "\e\x2e\x31ct\x03" 		# Centre top
	echo -en "\e\x2e\x32rt\x03" 		# Right top
	echo -en "\e\x2e\x33lm\x03" 		# left middle
	echo -en "\e\x2e\x34cm\x03" 		# Centre middle
	echo -en "\e\x2e\x35rm\x03" 		# Right middle
	echo -en "\e\x2e\x36lb\x03" 		# Left bottom
	echo -en "\e\x2e\x37cb\x03" 		# Centre bottom
	echo -en "\e\x2e\x38rb\x03" 		# Right bottom
	
	echo -en "\e\x2c\x50\x40X\x03"		# Write x at (
	echo -en "\e\x2c\x50\x40"			# Set pixel position (
	echo -en "\e\x2e\x3cxt\x03" 		# Left keep x
	echo -en "\e\x2c\x50\x40"			# Set pixel position (
	echo -en "\e\x2e\x3dxm\x03" 		# Centre keep x
	echo -en "\e\x2c\x50\x40"			# Set pixel position (
	echo -en "\e\x2e\x3exb\x03" 		# right keep x

	echo -en "\e\x2c\x40\x40Y\x03"		# Write Y at (20,20)
	echo -en "\e\x2c\x40\x40"			# Set pixel position (20,20)
	echo -en "\e\x2e\x39ly\x03" 		# Left keep y
	echo -en "\e\x2e\x3Acy\x03" 		# Centre keep y
	echo -en "\e\x2e\x3Bry\x03" 		# right keep y
}

test_4()
{
    cat 1>&2 << !EOF!
Testing utf8 euro sign
Required: utf8
------------------------
€
------------------------
!EOF!
	echo -en "\e\x42\x30"					# Set font
	echo -en "\e\x25"						# Clear display
	echo -en "\e\x2e\x30\xe2\x82\xac\x03"	# Left top € sign = \xe2\x82\xac
}

test_5()
{
    cat 1>&2 << !EOF!
Testing fake barcode scan
The display should should the error message (please ask for assistance)
And the received parcode should be "A1234" == 
(this only works when the application is started in debug mode (commandline -D)
!EOF!
	echo -en "\e\xff\x30A1234\x03"				# Fake barcode scan
}

test_6()
{
    cat 1>&2 << !EOF!
Testing chinese charracters
The extra fontset should be available in /mnt (micro sd card)
!EOF!

	echo -en "\e\x42\x31"				# Set font
	echo -en "\e\x25"					# Clear display

	echo -en "\e\x2e\x30"
	echo -en "礦泉水"						# Mineral water
	echo -en "\x03"
	
	echo -en "\e\x2e\x33"
	echo -en "Mineral water"			# Mineral water
	echo -en "\x03"
	
	echo -en "\e\x42\x30"				# Set font
	
	echo -en "\e\x2e\x32"
	echo -en "公升"						# Liter
	echo -en "\x03"
	
	echo -en "\e\x2e\x36"
	echo -en "1 Liter"
	echo -en "\x03"
}

test_7()
{

	echo -en "\e\x42\x31"				# Set font
	echo -en "\e\x25"					# Clear display
	echo -en "\e\x2e\x30"
  	echo -en "применению"
	echo -en "\x03"
}

test_8()
{
    cat 1>&2 << !EOF!
Disabling scanner. Verify whether the scanner is disabled
!EOF!
	echo -en "\e\x5b\x30"				# Scanner disable
}

test_9()
{
    cat 1>&2 << !EOF!
Enable scanner. Verify whether the scanner is enabled
!EOF!
	echo -en "\e\x5b\x31"				# Scanner enable
}

test_10()
{
    cat 1>&2 << !EOF!
Show config.
Verify: 
	serial number
	application version
	ip-address
	used interface
	mac address
!EOF!
	echo -en "\e\xfe"					# Show config
}

test_11()
{
    cat 1>&2 << !EOF!
Check operation with sloppy formatting 
(not closing a string with \x03)
The display should look like:
------------------------

   One of 2
   Two of 2

------------------------
!EOF!
	# test sloppy formatting without end of string (=\x03) chars
	echo -en "\e\x42\x30"				# Font size 0
	echo -en "\e\x24"					# Clear screen
	echo -en "\e\x27\x35\x32"			# set cursor (not pixel!) position
	echo -en "One of 2"
	echo -en "\e\x27\x35\x33"			# set cursor position
	echo -en "Two of 2\x03"				# Text
}

test_12()
{
    cat 1>&2 << !EOF!
Play a beep
!EOF!

	echo -en "\e\x5e"					# Beep
}

test_14()
{
    cat 1>&2 << !EOF!
Testing greek letters in utf8:
------------------------
βιβλος γενεσεως ιησου
------------------------
!EOF!
	echo -en "\e\x42\x30"						# Font size 0
	echo -en "\e\x24"							# Clear the screen
	echo -en "\e\x2e\x31βιβλος γενεσεως ιησου\x03" 	# Text center - top
}

test_15()
{
    cat 1>&2 << !EOF!
Testing special german charracters (utf8)
------------------------
őŐűŰúÚ
------------------------
!EOF!
	echo -en "\e\x42\x30"						# Font size 0
	echo -en "\e\x24"							# Clear the screen
	echo -en "\e\x2e\x31őŐűŰúÚ\x03" 	# Text center - top
}

test_16()
{
    cat 1>&2 << !EOF!
Testing special greek charracters (ibm1253)
------------------------

------------------------
!EOF!
	echo -en "\e\x42\x30"						# Font size 0
	echo -en "\e\x24"							# Clear the screen
	echo -en "\e\x2e\x31\xb6\xa8\xa5\x03" 	# Text center - top
	
	
}

test_gpio_OUT1_low ()
{
	# Eddy GPIO 1/Output		GPIO1-->PC16 (offset:1)
	# Eddy GPIO 3/Output		GPIO3-->PC18 (offset:3)
	# Eddy GPIO 5/Input			GPIO5-->PC20 (offset:5)
	# Eddy GPIO 7/Input			GPIO7-->PC22 (offset:7)
	# NQ201 whitelight(only for nQuire 201)		GPIO11 --> PC26(offset:11)
	#											High level disable ;	Low level enable	
	# Peripheral power(usb,wifi,2027,GPRS,lcd-backlight)	PID1  --> PC7 (offset:18)
	#											High level enable ;	Low level disable

    cat 1>&2 << !EOF!
Set gpio OUT1 low
!EOF!
	
	echo -en "\e\x7e00"
}


test_gpio_OUT1_high ()
{
    cat 1>&2 << !EOF!
Set gpio OUT1 high
!EOF!
	echo -en "\e\x7e01"
}

test_gpio_OUT2_low ()
{
    cat 1>&2 << !EOF!
Set gpio OUT2 low
!EOF!
	echo -en "\e\x7e10"
}

test_gpio_OUT2_high ()
{
    cat 1>&2 << !EOF!
Set gpio OUT2 high
!EOF!
	echo -en "\e\x7e11"
}

test_gpio_IN1 ()
{
    cat 1>&2 << !EOF!
Get gpio IN1
!EOF!
	echo -en "\e\x7f0"
}

test_gpio_IN2 ()
{
    cat 1>&2 << !EOF!
Get gpio IN2
!EOF!
	echo -en "\e\x7f1"
}

test_sleep ()
{
    cat 1>&2 << !EOF!
Set scanner in sleep mode (should only works with scanners
from production batch 1 and than only when using the ethernet interface)
!EOF!

	echo -en "\e\x5d\x30"               # scanner sleep
}

test_wakeup ()
{
    cat 1>&2 << !EOF!
Wake up scanner from sleep mode
!EOF!
	echo -en "\e\x5d\x31"               # scanner wake up
}

test_19 ()
{
    cat 1>&2 << !EOF!
return the firmware version, SG15 format.
Expect: "SG15V01.03" ==
!EOF!

	echo -en "\e\x60"                   # SG15 firmware version
}

test_20 ()
{
    cat 1>&2 << !EOF!
Required: Utf 8 
Expect:
--------------------
Cheese
500 gr

              € 5.69
--------------------
!EOF!

	echo -en "\e\x42\x30"
	echo -en "\e\x25"
	echo -en "Cheese\n"
	echo -en "500 gr"
	echo -en "\e\x42\x31"
	echo -en "\e\x2e\x38"
	echo -en "${EURO} 5.69\x03"
}

test_21 ()
{
    cat 1>&2 << !EOF!
Test right bottom alignement for chinese charracters
Required: utf8
Expect:
---------------------



             欢迎光临
---------------------
!EOF!
	echo -en "\e\x25"
	echo -en "\e\x2e\x38" # right bottom
	echo -en "欢迎光临\x03"
}

test_22 ()
{
    cat 1>&2 << !EOF!
Test small and big chinese font
Required: utf8
Expect
---------------------
汽水
500ml

               2.5元
---------------------
!EOF!
	echo -en "\e\x42\x30" # font size small
	echo -en "\e\x25"     # clear screen
	echo -en "汽水\n500ml"
	echo -en "\e\x42\x31" # font size big
	echo -en "\e\x2e\x38" # align rb
	echo -en "2.5元\x03"
}

test_23 ()
{
    cat 1>&2 << !EOF!
Test use of NL ('\n') in line with centered alignment and long text
Should work independent of font set
Expect on display:
------------------------------
        Line 1 part 1
  blabla line1 part 2 blabla
  
    line2 part 1
line2 part 2 blabla
  
------------------------------
!EOF!

	echo -en "\e\x25"     # clear screen
	echo -en "\e\x42\x30" # font size small
	echo -en "\e\x2e\x31Line1 part 1\nblabla line1 part 2 blabla\x03" # Center top
	echo -en "\e\x2752"    # charracter position at 5,3
	echo -en "Line2 part 1\nline2 part 2 blabla\x03"
	echo -en "\e\x2e\x38Line3 part 1\nline3 part 2 blabla\x03" # right bottom
}

test_24 ()
{
    cat 1>&2 << !EOF!
Testing SG15 compatebility for line breaks
Test use of CR ('\x0d') in line with centered alignment and long text
Should work independent of font set
Expect on display:
------------------------------
        Line 1 part 1
  blabla line1 part 2 blabla
  
    line2 part 1
line2 part 2 blabla
  
------------------------------
!EOF!

	echo -en "\e\x25"     # clear screen
	echo -en "\e\x42\x30" # font size small
	echo -en "\e\x2e\x31Line1 part 1\x0dblabla line1 part 2 blabla\x03"	# Center top
	echo -en "\e\x2752"    # charracter position at 5,3
	echo -en "Line2 part 1\x0dline2 part 2 blabla\x03"
	echo -en "\e\x2e\x38Line3 part 1\x0dline3 part 2 blabla\x03" # right bottom
}


test_25 ()
{
    cat 1>&2 << !EOF!
Test use of line break in text
Just positioning on 10,21 px
Should work independent of font-set
Testing SG15 and unix line-breaks in the same testcase
Expect on display:
------------------------------
  Line 1 part 1
line 1 part 2

       Line 2 part 1
line 2 part 2
  
------------------------------
!EOF!

	echo -en "\e\x25"     # clear screen
	echo -en "\e\x42\x30" # font size small
	echo -en "\e\x2c\x34\x34"					# Set pixel position (4,4)
	echo -en "Line1 part 1\nline1 part 2\x03"
	echo -en "\e\x2c\x50\x50"					# Set pixel position (20,20)
	echo -en "Line2 part 1\x0dline2 part 2\x03"
}

test_26 ()
{
    cat 1>&2 << !EOF!
Test use of line break in text
Just positioning 4,2 (char pos)
------------------------------


    Line 1 part 1
line 1 part 2
  
------------------------------
!EOF!

	echo -en "\e\x25"     # clear screen
	echo -en "\e\x42\x30" # font size small
	echo -en "\e\x27\x34\x32"					# Set cursor position 4,2
	echo -en "Line1 part 1\nline1 part 2\x03"
}

test_27 ()
{
    cat 1>&2 << !EOF!
Test use of NL (unix style) in text with alignments
Should work independent of font set
Expect on display:
------------------------
lt         ct         rt
lt2       ct02       rt2

lm         cm         rm
lm2       cm02       rm2
                 
lb         cb         rb
lb2       cb02       rb2
------------------------
!EOF!
	echo -en "\e\x42\x30"				# Set font
	echo -en "\e\x25"					# Clear display
	echo -en "\e\x2e\x30lt1\nlt2\x03" 		# Left top
	echo -en "\e\x2e\x31ct\nct02\x03" 		# Centre top
	echo -en "\e\x2e\x32rt\nrt2\x03" 		# Right top
	echo -en "\e\x2e\x33lm\nlm2\x03" 		# left middle
	echo -en "\e\x2e\x34cm\ncm02\x03" 		# Centre middle
	echo -en "\e\x2e\x35rm\nrm2\x03" 		# Right middle
	echo -en "\e\x2e\x36lb\nlb2\x03" 		# Left bottom
	echo -en "\e\x2e\x37cb\ncb02\x03" 		# Centre bottom
	echo -en "\e\x2e\x38rb\nrb2\x03" 		# Right bottom
}

test_28 ()
{
    cat 1>&2 << !EOF!
Test use of CR (SG15) in text with alignments
Should work independent of font set
Expect on display:
------------------------
lt         ct         rt
lt2       ct02       rt2

lm         cm         rm
lm2       cm02       rm2
                 
lb         cb         rb
lb2       cb02       rb2
------------------------
!EOF!
	echo -en "\e\x42\x30"				# Set font
	echo -en "\e\x25"					# Clear display
	echo -en "\e\x2e\x30lt1\x0dlt2\x03" 		# Left top
	echo -en "\e\x2e\x31ct\x0dct02\x03" 		# Centre top
	echo -en "\e\x2e\x32rt\x0drt2\x03" 		# Right top
	echo -en "\e\x2e\x33lm\x0dlm2\x03" 		# left middle
	echo -en "\e\x2e\x34cm\x0dcm02\x03" 		# Centre middle
	echo -en "\e\x2e\x35rm\x0drm2\x03" 		# Right middle
	echo -en "\e\x2e\x36lb\x0dlb2\x03" 		# Left bottom
	echo -en "\e\x2e\x37cb\x0dcb02\x03" 		# Centre bottom
	echo -en "\e\x2e\x38rb\x0drb2\x03" 		# Right bottom
}

test_29 ()
{
    cat 1>&2 << !EOF!
Test use of line break in text with alignments
Expect on display:
------------------------
tbd
------------------------
!EOF!
	echo -en "\e\x42\x30"				# Set font
	echo -en "\e\x25"					# Clear display
	echo -en "\e\x2c\xd0\x82X\x03"		# Write x at (
	echo -en "\e\x2c\xd0\x84"			# Set pixel position (
	echo -en "\e\x2e\x3cxt\nxt2\x03" 	# Left keep x
	echo -en "\e\x2c\xd0\x84"			# Set pixel position (
	echo -en "\e\x2e\x3dxm\nxm2\x03" 	# Centre keep x
	echo -en "\e\x2c\xd0\x84"			# Set pixel position (
	echo -en "\e\x2e\x3exb\nxb2\x03" 	# right keep x

	echo -en "\e\x2c\x44\x44Y\x03"		# Write Y at (20,20)
	echo -en "\e\x2c\x44\x44"			# Set pixel position (20,20)
	echo -en "\e\x2e\x39ly\nly2\x03" 	# Left keep y
	echo -en "\e\x2e\x3Acy\ncy2\x03" 	# Centre keep y
	echo -en "\e\x2e\x3Bry\nry2\x03" 	# right keep y
}

test_30 ()
{
    cat 1>&2 << !EOF!
Test use of NL (SG15 style) in text with alignments
Expect on display:
------------------------
tbd
------------------------
!EOF!
	echo -en "\e\x42\x30"				# Set font
	echo -en "\e\x25"					# Clear display
	echo -en "\e\x2c\xd0\x82X\x03"		# Write x at (
	echo -en "\e\x2c\xd0\x84"			# Set pixel position (
	echo -en "\e\x2e\x3cxt\x0dxt2\x03" 	# Left keep x
	echo -en "\e\x2c\xd0\x84"			# Set pixel position (
	echo -en "\e\x2e\x3dxm\x0dxm2\x03" 	# Centre keep x
	echo -en "\e\x2c\xd0\x84"			# Set pixel position (
	echo -en "\e\x2e\x3exb\x0dxb2\x03" 	# right keep x

	echo -en "\e\x2c\x44\x44Y\x03"		# Write Y at (20,20)
	echo -en "\e\x2c\x44\x44"			# Set pixel position (20,20)
	echo -en "\e\x2e\x39ly\x0dly2\x03" 	# Left keep y
	echo -en "\e\x2e\x3Acy\x0dcy2\x03" 	# Centre keep y
	echo -en "\e\x2e\x3Bry\x0dry2\x03" 	# right keep y
}



test_31 ()
{
    cat 1>&2 << !EOF!
Test custom font size (very small and VERY BIG)
!EOF!
	echo -en "\e\x25" 				# clear screen
	echo -en "\e\x42\x32custom 32H\n\x03" # 6pt
	echo -en "\e\x42\x4040H\x03" # 96pt
	echo -en "\e\x42\x31" # big
}


test_32 ()
{
    cat 1>&2 << !EOF!
Watson bug: \0 charracters instead of '\x03'
!EOF!
	echo -en "\e\x25" 				# clear screen
	echo -en "\e\x2e\x3812345"      # 
	echo -en "\0\0\0\0\0\0\0\0"     # 
	
}


test_33 ()
{
    cat 1>&2 << !EOF!
Image test. Displayed images should be clickable
!EOF!
	echo -en "\e\x25" 				# clear screen

	echo -en "\e\xf2anim.gif\r\r33\x03"

	echo -en "\e\xf21.gif\r\r44\x03"
	echo -en "\e\xf22.gif\r\r55\x03"
	echo -en "\e\xf23.gif\r\r66\x03"
	echo -en "\e\xf2ok.gif\r\r77\x03"
	
	echo -en "\e\xf24.gif\r\r88\x03"
	echo -en "\e\xf25.gif\r\r99\x03"
	echo -en "\e\xf26.gif\r\raa\x03"
	echo -en "\e\xf2cancel.gif\r\rbb\x03"
	
	echo -en "\e\xf27.gif\r\rcc\x03"
	echo -en "\e\xf28.gif\r\rdd\x03"
	echo -en "\e\xf29.gif\r\ree\x03"
	echo -en "\e\xf20.gif\r\rff\x03"
	
	echo -en "\e\x2e\x30This is text\x0dlt2\x03"
}

test_34 ()
{
    cat 1>&2 << !EOF!
Image test: back to idle mode, use after test_33 to break keyboard input
!EOF!
	echo -en "\e\xf3"
}

test_35 ()
{
    cat 1>&2 << !EOF!
Image test. 1 image in each corner
!EOF!
	echo -en "\e\x25" 				# clear screen
	echo -en "\e\xf01.gif\x03"

	echo -en "\e\x2c\xe4\x30"
	echo -en "\e\xf02.gif\x03"

	echo -en "\e\x2c\xe4\x90"
	echo -en "\e\xf03.gif\x03"

	echo -en "\e\x2c\x30\x90"
	echo -en "\e\xf04.gif\x03"
	
	echo -en "\e\x2c\x68\x58"
	echo -en "\e\xf0anim.gif\x03"
}

test_36 ()
{
    cat 1>&2 << !EOF!
Turn backlight off
!EOF!
	echo -en "\e\x5c\x30"
}

test_37 ()
{
    cat 1>&2 << !EOF!
Turn backlight on
!EOF!
	echo -en "\e\x5c\x31"
}

test_38 ()
{
    cat 1>&2 << !EOF!
Flicker backlight
!EOF!
	echo -en "\e\x5c\x30\e\x5c\x31"
}

test_crash()
{
    cat 1>&2 << !EOF!
Simulate a crash
This should be catched and logged
!EOF!
	echo -en "\e\xfd"
}

test_utf8()
{
    cat 1>&2 << !EOF!
Change to utf8 using fake barcode scan.
!EOF!
	echo -en "\e\xffF%#\$^*%\x03"					# Fake barcode scan: enter programming mode
	sleep 3
	echo -en "\e\xffF020705\x03"					# program settings
	sleep 4
	echo -en "\e\xffF/cit/codepage = utf8\x03"		# Fake barcode scan
	sleep 1
	echo -en "\e\xffF%*^\$#%\x03"					# Fake barcode scan: exit programming mode
}


test_ibm852()
{
    cat 1>&2 << !EOF!
Change to utf8 using fake barcode scan.
!EOF!
	echo -en "\e\xffF%#\$^*%\x03"					# Fake barcode scan: enter programming mode
	#echo -en "\e\xff020705\x03"						# program settings
	#echo -en "\e\xff/cit/codepage = ibm852\x03"		# Fake barcode scan
	#echo -en "\e\xff%*^\$\#%\x03"					# Fake barcode scan: exit programming mode
}


if test -z "$1" -o "$1" = "-h" -o "$1" = "--help";
then

	echo "cit-test -h|{[-udp][-tcp][-imb852][-utf8] [-a <ip address>] <test id>}+"
	echo "Send a certain string to the cit"
	echo "Output is done to port 9000 for TCP"
	echo " -udp        use udp messages"
	echo " -tcp        use tcp messages (default)"
	echo " -utf8       use utf8 euro sign charracter"
	echo " -ibm852     use imb852 euro sign charracter (default)"
	echo " -a address  the address or name of the nquire (when ommitted, the"
	echo "             contents of .cit.ip is used)"
	echo "Test id's:"
	echo " 1           Mineral water"
	echo " 2           Coca Cola"
	echo " 3           All alignments"
	echo " 5           fake barcode scan"
	echo " 8           scanner disable"
	echo " 9           scanner enable"
	echo "10           show config"
	echo "11           test sloppy formatting without end of string (=\x03) chars"
	echo "12           beep"
	echo "OUT1_low     Set gpio OUT1"
	echo "OUT1_high    Set gpio OUT1"
	echo "OUT2_low     Set gpio OUT2"
	echo "OUT2_high    Set gpio OUT2"
	echo "IN1          read gpio IN1"
	echo "IN2          read gpio IN2"
	echo "sleep        scanner sleep"
	echo "wakeup       scanner wakeup"
	echo "19           SG15 firmware version"
	echo "20           utf8 font"
	echo "21           chinese"
	echo "22           small and big chinese"
	echo "23           newline in line"
	echo "24           CR in line (SG15 compatebility)"
	echo "25           right align with same y"
	echo "26           alignment tests"
	echo "27           alignment tests"
	echo "28           alignment tests"
	echo "29           alignment tests"
	echo "30           alignment tests"
	echo "31           alternative font sizes"
	
	echo "utf8         change to utf8 using fake barcode scan"
	echo "ibm852       change to imb852 using fake barcode scan"

	exit

else
	PORT=$TCP_PORT
	while test -n "$1"; do
		if test "$1" = "-udp"; then
			PORT=$UDP_PORT
			UDP="-u"
		elif test "$1" = "-tcp"; then
			PORT=$TCP_PORT
			UDP=
		elif test "$1" = "-utf8"; then
			EURO=${EURO_UTF8}
		elif test "$1" = "-ibm852"; then
			EURO=${EURO_IBM852}
		elif test "$1" = "-a"; then
			shift
			ADDRESS=$1
			echo "$ADDRESS" > .cit.ip
		else 
			echo ------------------------------------------------------------------
			echo "test $1 on ${ADDRESS}:${PORT}"
			test_$1 | nc -w1 $UDP ${ADDRESS} ${PORT}
			sleep 1
		fi
		shift
	done
fi

#-- vi: ft=sh ts=4 sw=4
